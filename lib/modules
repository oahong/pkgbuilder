#! /bin/bash

# download debian src
aptGetSource() {
    local aptcache=
    local aptdir=${scriptdir}/apt

    local apt_options="-o Dir::Etc=${aptdir} \
        -o Dir::Etc::sourcelist=sources.list-${ARCH} \
        -o Dir::Etc::SourceParts=/dev/null \
        -o Dir::State=${aptdir}/state \
        -o Dir::Cache=${aptdir}/cache \
        -o Debug::NoLocking=true \
        -o Acuqire::Retries=5 \
        -o APT::Architecture=${ARCH} \
        -o APT::Default-Release=${DISTRIBUTIONS[${ARCH}]} \
        -o APT::Get::Assume-Yes=true \
        -o APT::Get::AllowUnauthenticated=true"

    mkdir -pv ${aptdir}/state/lists/partial

    # create sources.list
    cat <<EOF > ${aptdir}/sources.list-${ARCH}
deb [lang=en] ${UPSTREAMREPO[$ARCH]} ${DISTRIBUTIONS[${ARCH}]} main contrib non-free
deb-src [lang=en] ${UPSTREAMREPO[$ARCH]} ${DISTRIBUTIONS[${ARCH}]} main contrib non-free
EOF
    # update package index
    apt-get ${apt_options} update

    aptcache=$(apt-cache ${apt_options} showsrc $package)
    # get package name and package version
    package=$(echo "${aptcache}" | awk '/^Package:/ {print $2; exit}')
    version=$(echo "${aptcache}" | awk -F: '/^Version:/ {gsub(/ /, "", $NF); ver=$NF} END {print ver}')

    # download debian source code
    createWorkdir

    pushd ${workdir}
    info "Downloading source package from ${UPSTREAMREPO[$ARCH]}"
    apt-get ${apt_options} source --download-only ${package}
    popd
}

downloadDebianSrc() {
    local odscfile=$(basename ${dsc})
    local dscfile=$(urlDecode $odscfile)

    package=${dscfile%%_*}
    version=$(echo ${dscfile//.dsc} | sed -e "s/${package}_//")

    createWorkdir
    # dsc is an uri
    if checkValidURL $dsc ; then
        hasBin dget || die EPACKAGE "Install devscripts"
        pushd ${workdir}
        dget -d -u ${dsc}
        # Make sure the final dscfile is url decoded
        # http://www.degraeve.com/reference/urlencoding.php
        [[ $odscfile == $dscfile ]] || mv $odscfile $dscfile
        popd
    elif [[ -f $dsc ]] ; then
        # dsc is a local file
        local dscpath=$(dirname $(realpath -e ${dsc}))
        if [[ ${dscpath} == ${workdir} || \
                  ${dscpath} == ${ARTIFACTS}/${package} ]] ; then
            : do nothing if dsc resides in these places
        else
            # copy source package to workdir
            dcmd cp -v ${dsc} ${workdir} || \
                die EACCESS "Not able to copy source package recorded in $dsc to $workdir"
        fi
    fi
    dsc=$dscfile
    [[ -f ${workdir}/${dscfile} ]] || \
        [[ -f ${ARTIFACTS}/${package}/${dscfile} ]] || \
            die EACCESS "Not able to locate ${dscfile} in both ${workdir} and ${ARTIFACTS}"
}

prepareBuild() {
    local srcdir=${workdir}/${package}-${version}

    info "clean up $srcdir"
    rm -rf $srcdir

    if [[ -z $dsc ]] ; then
        dsc=${package}_${version}.dsc
    fi

    local dscinw=${workdir}/${dsc}
    local dscina=${ARTIFACTS}/${package}/${dsc}

    # Searching debian source control file in workdir o/ artifacts
    if [[ -f ${dscinw} ]] ; then
        info "Found ${dscinb}"
        dpkg-source -x ${dscinw} ${srcdir}
    elif [[ -f ${dscina} ]] ; then
        info "Found ${dscina}"
        dpkg-source -x ${dscina} ${srcdir}
    else
        die EACCESS "Fail to read Debian source control file"
    fi
}

buildPackage() {
    pushd ${workdir}/${package}-${version}

    # return unless we want to build a package
    [[ ${build_pkg} -eq 1 ]] || \
        [[ ${build_pkg_via_pbuilder} -eq 1 ]] || return 0

    local hookdir=${scriptdir}/hooks.d/debuild
    # pbuilder will copy hooks into chroots
    [[ ${build_pkg_via_pbuilder} ]] && hookdir=/tmp/hooks

    dch -a -D ${DISTRIBUTIONS[$ARCH]} "${changelog}"

    case ${ARCH} in
        sw_64)
            warn "Add a hooks for ${ARCH} platform"
            DEBBUILDOPTS+=" --hook-init=${hookdir}/sw64-check-sw64ize.hook"
            DEBBUILDOPTS+=" --hook-build=${hookdir}/sw64-fix-arch.hook"
            ;;
    esac

    # function parameter should override DEBBUILDOPTS
    DEBBUILDOPTS+=" $@"

    if [[ $build_pkg -eq 1 ]] ; then
        info "Checking build dependencies:"
        if dpkg-checkbuilddeps -a ${ARCH} debian/control; then
            info "Build dependencies satisfied"
        else
            die EDEPS "Build dependencies unsatisfied"
        fi

        info "buildpackage with options: ${DEBBUILDOPTS}"
        eval dpkg-buildpackage ${DEBBUILDOPTS} || \
                die EBUILD "Failed to build ${package} via dpkg-buildpackage"
    else
        eval pdebuild --pbuilder cowbuilder  \
             --use-pdebuild-internal         \
             --debbuildopts '"${DEBBUILDOPTS}"' \
             ${PBUILDEREXTRAOPTS[@]}         \
             --                              \
             ${PBUILDEROPTS[@]}              \
             ${COWBUILDEROPTS[@]} || \
             die EBUILD "Failed to build ${package} via cowbuilder"
    fi

    popd
    moveArtifacts
}

moveArtifacts() {
    local artifactsdir=${ARTIFACTS}/${package}
    local changes=${workdir}/${package}_${version}_${ARCH}.changes
    if [[ -f $changes ]] ; then
        info "Moving build artifacts to $artifactsdir"
        install -d $artifactsdir
        dcmd mv -v $changes $artifactsdir
    fi
}

uploadArtifacts() {
    hasBin dput || die EPACKAGE "Install dput"
    [[ -n $uhost ]] || return
    if dput -H | grep -wqs ${uhost} ; then
        dput -uf ${uhost} ${ARTIFACTS}/${package}/${package}_${version}_${ARCH}.changes
    else
        warn "No ${uhost} definition in dput configuration, ignore package upload"
    fi
}
# vim: number tabstop=4 softtabstop=4 expandtab
