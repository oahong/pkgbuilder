#! /bin/bash

export PATH="/usr/sbin:$PATH"

declare -Ar color=(
    ['reset']='\e[0m'
    ['error']='\e[1m\e[31m'
    ['info']='\e[1m\e[32m'
    ['warn']='\e[1m\e[33m'
)

die() {
    local ecode=EMISC

    if [[ $1 =~ ^E[A-Z]+ ]] ; then
        ecode=$1
        shift
    fi

    echo -e "${color[error]}E:=$ecode=${color[reset]} $BASH_LINENO: $@" >&2
    exit ${ERROR[$ecode]}
}

info() {
    echo -e "${color[info]}I:${color[reset]} $@"
}

warn() {
    echo -e "${color[warn]}W:${color[reset]} $@"
}

hasBin() {
    local executable=$1
    if [[ -n $(type $1) ]] ; then
        return 0
    else
        return 1
    fi
}

hasPackage() {
    local pkg=$1
    if dpkg-query -f '${binary:Package}\n' -W | grep -wqs $pkg ; then
        return 0
    else
        return 1
    fi
}

assert() {
    local ret
    eval ret=\$${1}
    [[ -n $ret ]] || die "I'm confused, var: ${1} is empty"
}

pushd() {
    builtin pushd $@ >& /dev/null
}

popd() {
    builtin popd $@ >& /dev/null
}


# http://stackoverflow.com/questions/3685970/check-if-an-array-contains-a-value
contains() {
    local element=
    local array="$2[@]"
    for element in ${!array}; do [[ $element == ${!1} ]] && return 0; done
    return 1
}

createdir() {
    local dir=$1
    local desc=$2

    if [[ ! -d ${dir} ]];then
        info "create $desc directory: $dir"
        mkdir -p $dir
    fi
}

printHelp() {
    local cmd=${0##*/}
    cat <<EOF >&2
Usage:
  ${cmd} -n PACKAGE|-d DSC [-u HOST] [-s SOURCE] [-b|-p] [-r] [-h]
  ${cmd} -l | --list-src

Package builder for deepin shanghai team, version $SVERSION

Help Options:
  -h, --help                   Show help options
Application Options:
  -d, --dsc=DSC                Build a debian package according to a DSC (debian src control file)
  -l, --list-src               Print a list of predefined upstream sources
  -n, --package=PACKAGE        Build PACKAGE
  -u, --upload=HOST            Upload build artifacts to HOST, define HOST in dput config
  -s, --source=SOURCE          Download source package from predefined SOURCE (Read -l output)
  -b, --build                  Perform a package build via dpkg-buildpackage
  -p, --pbuilder               Perform a package build via pbuilder (recommended for a clean buid)
  -r, --rebuild                Rebuild an architecture independent package


Examples:
  ${cmd} -l                                        List predefined upstream sources
  ${cmd} -n foo                                    Prepare for building package foo
  ${cmd} -n dde-desktop -b -s debian               Build foo from scratch, get dsc from debian
  ${cmd} -n dde-desktop -b -u staging              Build foo then upload to host staging
  ${cmd} -a mips64el -n base-files -p              Build foo in a clean mips64el chroot
EOF
    exit 0
}
