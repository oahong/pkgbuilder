#! /bin/bash

export PATH="/usr/sbin:$PATH"

declare -Ar color=(
    ['reset']='\e[0m'
    ['error']='\e[1m\e[31m'
    ['info']='\e[1m\e[32m'
    ['warn']='\e[1m\e[33m'
)

die() {
    local ecode=EMISC

    if [[ $1 =~ ^E[A-Z]+ ]] ; then
        ecode=$1
        shift
    fi

    echo -e "${color[error]}E:=$ecode=${color[reset]} $BASH_LINENO: $@" >&2
    exit ${ERROR[$ecode]}
}

info() {
    echo -e "${color[info]}I:${color[reset]} $@"
}

warn() {
    echo -e "${color[warn]}W:${color[reset]} $@"
}

hasBin() {
    local executable=$1
    if [[ -n $(type $1) ]] ; then
        return 0
    else
        return 1
    fi
}

hasPackage() {
    local pkg=$1
    if dpkg-query -f '${binary:Package}\n' -W | grep -wqs $pkg ; then
        return 0
    else
        return 1
    fi
}

assert() {
    local ret
    eval ret=\$${1}
    [[ -n $ret ]] || die "I'm confused, var: ${1} is empty"
}

pushd() {
    builtin pushd $@ >& /dev/null
}

popd() {
    builtin popd $@ >& /dev/null
}


# http://stackoverflow.com/questions/3685970/check-if-an-array-contains-a-value
contains() {
    local element=
    local array="$2[@]"
    for element in ${!array}; do [[ $element == ${!1} ]] && return 0; done
    return 1
}

createdir() {
    local dir=$1
    local desc=$2

    if [[ ! -d ${dir} ]];then
        info "create $desc directory: $dir"
        mkdir -p $dir
    fi
}

printHelp() {
    local cmd=${0##*/}
    cat <<EOF >&2
Usage:
  ${cmd} -n PACKAGE|-d DSC [-a ARCH] [-u HOST] [-r REPO] [-b|-p] [-h]
  ${cmd} -l | --list-repo

Package builder for deepin mips team, version $SVERSION

Help Options:
  -h, --help            Show help options
Application Options:
  -a, --arch=ARCH              Build package for ARCH architecture
  -d, --dsc=DSC                Build package according to a DSC, DSC should be
                               a local path or url to Debian src control file
  -l, --changelog=CHANGELOG    Use CHANGELOG as debian package changelog
  -n, --package=PACKAGE        Build PACKAGE
  -u, --upload=HOST            Upload build artifacts to HOST, you should
                               define HOST in dput config
  -r, --repo=REPO              Download source package from predefined REPO
  -b, --build                  Perform a package build using dpkg-buildpackage
  -p, --pbuilder               Perform a package build using pbuilder
                               (recommended for a clean buid)

Note:
${cmd} will not issue any build command (pdebuild or dpkg-buildpackage) unless -p or -b option is specified.

Examples:
  ${cmd} -l                                        List predefined upstream repositories
  ${cmd} -n dde-desktop                            Prepare for building dde-destop
  ${cmd} -n dde-desktop -b                         Build dde-desktop from scratch
  ${cmd} -n dde-desktop -b -u staging              Build dde-desktop then upload to staging
  ${cmd} -n dde-api -p -l "Rebuild for testing"    Build dde-api in a clean pbuilder chroot
  ${cmd} -a mips64el -n base-files -p              Build base-files in a clean mips64el chroot
EOF
    exit 0
}
