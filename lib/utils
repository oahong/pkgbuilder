#! /bin/bash

hasPbuilderChroot() {
    local pbuilderroot=${WORKBASE}/base.cow-${ARCH}

    if [[ -x ${pbuilderroot}/bin/ls ]] ; then
        return 0
    else
	    if [[ -d ${pbuilderroot} ]] ; then
            warn "Incompleted pbuilder environment detected at ${pbuilderroot}"
            die "You should manually remove ${pbuilderroot} and run the script again"
	    fi
        return 1
    fi
}

# taken from http://stackoverflow.com/questions/3183444/check-for-valid-link-url
checkValidURL() {
    regex='(https?|ftp|file)://[-A-Za-z0-9\+&@#/%?=~_|!:,.;]*[-A-Za-z0-9\+&@#/%=~_|]'
    if [[ $1 =~ $regex ]] ; then
        return 0
    else
        return 1
    fi
}

printBuildInfo() {
    local builder='None'

    info "Wait a few seconds, I'll show your upstream package versions, for reference only"
    rmadison $package
    sleep 5

    [[ $build_pkg -eq 1 ]] && builder=dpkg-buildpackage
    [[ $build_pkg_via_pbuilder -eq 1 ]] && builder=cowbuilder

    info "Build script version: $SVERSION"
cat <<EOF
We're building on architecture ${ARCH}:
    package:        ${package}
    changelog:      ${changelog}
    dsc:            ${dsc}
    builder:        ${builder}
    maintianer:     ${DEBFULLNAME}
EOF
}

urlDecode() {
    if echo $1 | grep -qs % ; then
        echo -e "$(echo $1 | sed 's/+/ /g;s/%/\\x/g')"
    else
        echo $1
    fi
}

createWorkdir() {
    assert package
    workdir=${WORKBASE}/${package}
    createdir ${workdir} "work base"
}

# http://wiki.bash-hackers.org/howto/mutex
lockScript() {
    local lockfile=/tmp/${package}-${version}-lock
    if ( set -o noclobber; echo $$ > $lockfile ) 2>/dev/null ; then
        info "Acquiring a mutex lock on $lockfile"
        trap "reset; rm -f $lockfile; exit $?" INT TERM EXIT
    else
        die "Someone is building ${package} ${version} via PID $(cat $lockfile)"
    fi
}

unlockScript() {
    local lockfile=/tmp/${package}-${version}-lock
    info "Releasing mutex lock on $lockfile"
    rm -f $lockfile
    trap - INT TERM EXIT
}

listSrc() {
    info "List supported upstream sources:"
    echo -e "name\t\trepo\t\tcodename"
    echo "============================================================"
    for key in ${!USOURCE[@]} ; do
        echo -e "${key}\t${USOURCE[$key]}\t${UCODENAME[$key]}"
    done
    echo "============================================================"
    exit 0
}
